<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 世间的一切都值得纪念</title><link>http://localhost:1313/posts/</link><description>Recent content in Posts on 世间的一切都值得纪念</description><generator>Hugo</generator><language>zh-CN</language><lastBuildDate>Wed, 08 May 2024 22:15:01 +0800</lastBuildDate><atom:link href="http://localhost:1313/posts/rss.xml" rel="self" type="application/rss+xml"/><item><title>Reference</title><link>http://localhost:1313/posts/20240508/reference/</link><pubDate>Wed, 08 May 2024 22:15:01 +0800</pubDate><guid>http://localhost:1313/posts/20240508/reference/</guid><description>引用和借用 fn main(){ let s1 = String::from(&amp;#34;hello&amp;#34;); let len = calculate_length(&amp;amp;s1); println!(&amp;#34;The length of &amp;#39;{}&amp;#39; is {}&amp;#34;,s1,len); } fn calculate_length(s: &amp;amp;String) -&amp;gt; usize { s.len } 在这个例子中，参数类型是&amp;amp;String 而不是 String &amp;amp;表示引用，引用只</description></item><item><title>所有权与函数</title><link>http://localhost:1313/posts/20240501/rust3/</link><pubDate>Wed, 01 May 2024 03:10:07 +0800</pubDate><guid>http://localhost:1313/posts/20240501/rust3/</guid><description>所有权与函数 在语义上，将值传递给函数和把值赋值给变量是类似的，要么发生移动，要么发生复制 let s = String::from(&amp;#34;hello,world&amp;#34;); take_ownership(s); let x = 5; makes_copy(x); println!(&amp;#34;X:{}&amp;#34;,x); fn take_ownership(some_string:String){ println!(&amp;#34;{}&amp;#34;,some_string); } fn make_copy(some_number: i32){ println!(&amp;#34;{}&amp;#34;,some_number); } s的值被移动</description></item><item><title>所有权规则，内存与分配</title><link>http://localhost:1313/posts/20240426/rust2/</link><pubDate>Fri, 26 Apr 2024 23:52:39 +0800</pubDate><guid>http://localhost:1313/posts/20240426/rust2/</guid><description>String类型 String比其他标量数据类型都复杂。 字符串字面值：程序里手写的字符串的值，他们是不可变的。 string在heap上分配，能</description></item><item><title>大国农村的前世今生</title><link>http://localhost:1313/posts/20240416/xaingcun/</link><pubDate>Tue, 16 Apr 2024 12:14:11 +0800</pubDate><guid>http://localhost:1313/posts/20240416/xaingcun/</guid><description>你心中的农村是什么样的呢 那你又是否愿意俯身农村，去农村发展吗？ 为什么呢 这可能是某些从小生活在农村里的人印象的农村的样子。 ”面朝黄土背朝天，扛</description></item><item><title>First try of RUST</title><link>http://localhost:1313/posts/20240412/rust_day1/</link><pubDate>Fri, 12 Apr 2024 18:03:35 +0800</pubDate><guid>http://localhost:1313/posts/20240412/rust_day1/</guid><description>First try of rust It&amp;rsquo;s security is really excellent!!!!!
use std::io;//prelude use rand::Rng;//trait use std::cmp::Ordering; fn main() { let secret_number = rand::thread_rng().gen_range(1, 101);//i32,u32,i64 loop{ println!(&amp;#34;guess a number&amp;#34;); //let foo = 1; //let bar = foo; //foo = 2; It&amp;#39;s immutable in common sense let mut guess = String::new();//UTF-8 //:: means new is a union function //key word &amp;#39;mut&amp;#39; means that the &amp;#39;guess&amp;#39; is mutable io::stdin().read_line(&amp;amp;mut guess).expect(&amp;#34;can&amp;#39;t readline&amp;#34;); //The type of the return value of function &amp;#34;stdin&amp;#34; is Stdin //The type of the return value of method &amp;#34;read_line&amp;#34; is io::Result&amp;lt;usize&amp;gt;(enums) //io::Result OK,Err //shadow let guess: u32 = match guess.</description></item><item><title>前端第二天</title><link>http://localhost:1313/posts/20240227/second_day_for_front_end/</link><pubDate>Tue, 27 Feb 2024 16:13:12 +0800</pubDate><guid>http://localhost:1313/posts/20240227/second_day_for_front_end/</guid><description>设置HTML语言 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;设置HTML语言&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;marquee&amp;gt;I love you&amp;lt;/marquee&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; lang属性 作用： 1、让浏</description></item><item><title>前端第一天</title><link>http://localhost:1313/posts/20240226/day1_for_html/</link><pubDate>Mon, 26 Feb 2024 19:21:29 +0800</pubDate><guid>http://localhost:1313/posts/20240226/day1_for_html/</guid><description>What is HTML It's full name is&amp;quot;HyperText Markup Language&amp;quot;(超文本标记语言) HyperText:hyperlink. markup:It needs variable mark symbols to make it become a hypertext. Language:every symbol,using rule make it a mark language. First experience of HTML ```html &amp;lt;!DOCTYPE html&amp;gt; First experience of html 开始学习前端 ``` #</description></item><item><title>学习flask的第五天</title><link>http://localhost:1313/posts/20240203/flask5/</link><pubDate>Sat, 03 Feb 2024 23:16:30 +0800</pubDate><guid>http://localhost:1313/posts/20240203/flask5/</guid><description>flask很好，但我们不合适</description></item><item><title>学习flask的第四天</title><link>http://localhost:1313/posts/20240120/flask4/</link><pubDate>Sat, 20 Jan 2024 15:58:26 +0800</pubDate><guid>http://localhost:1313/posts/20240120/flask4/</guid><description>jinja jinja的基本语法结构 1.块语句： 带有jinja语法关键字的各种标准性语句 jinja变量赋值： {% set links=[ {&amp;#39;lable&amp;#39;:&amp;#39;Home&amp;#39;, &amp;#39;herf&amp;#39;:url_for(&amp;#39;.index&amp;#39;)}, {&amp;#39;lable&amp;#39;:&amp;#39;Home&amp;#39;, &amp;#39;herf&amp;#39;:url_for(&amp;#39;.about&amp;#39;)}, {&amp;#39;lable&amp;#39;:&amp;#39;Home&amp;#39;, &amp;#39;herf&amp;#39;:url_for(&amp;#39;.services&amp;#39;)}, {&amp;#39;lable&amp;#39;:&amp;#39;Home&amp;#39;, &amp;#39;herf&amp;#39;:url_for(&amp;#39;.projects&amp;#39;)} ] %} 使变量失效： {% with</description></item><item><title>学习flask的第三天</title><link>http://localhost:1313/posts/20240119/flask3/</link><pubDate>Fri, 19 Jan 2024 16:36:00 +0800</pubDate><guid>http://localhost:1313/posts/20240119/flask3/</guid><description>禁用自动转义 使用jinja的block（块）写法禁用转义 当文件绝对安全时 可以使用|safe过滤器 在jinja中，“|safe”称为过滤器 直接</description></item><item><title>学习flask的第二天</title><link>http://localhost:1313/posts/20240118/flask2/</link><pubDate>Thu, 18 Jan 2024 22:48:03 +0800</pubDate><guid>http://localhost:1313/posts/20240118/flask2/</guid><description>click 看了半天click用法，还让Mario帮忙，最后还是出错了 from flask import Flask, render_template,request,redirect,url_for,make_response,abort from werkzeug.routing import BaseConverter from werkzeug.utils import secure_filename import click from flask.cli import FlaskGroup from os import path class RegexConverter(BaseConverter): def __init__(self,url_map,*items): super(RegexConverter,self).__init__(url_map) self.regex=items[0] def create_app(): app = Flask(__name__) app.url_map.converters[&amp;#39;regex&amp;#39;] = RegexConverter @app.route(&amp;#34;/&amp;#34;) def index():</description></item><item><title>学习Flask的第一天</title><link>http://localhost:1313/posts/20240116/webday1/</link><pubDate>Tue, 16 Jan 2024 00:46:47 +0800</pubDate><guid>http://localhost:1313/posts/20240116/webday1/</guid><description>1.用到的插件 from flask import Flask, render_template,request from werkzeug.routing import BaseConverter 2.路由转换器 url转换器有三种：int,float,path # 路由转换器：int， float， path路径</description></item><item><title>船与海</title><link>http://localhost:1313/posts/20231229/zs5/</link><pubDate>Fri, 29 Dec 2023 21:32:29 +0800</pubDate><guid>http://localhost:1313/posts/20231229/zs5/</guid><description>张朔 “随波逐流的船，漫无边际的海”</description></item><item><title>Welcome</title><link>http://localhost:1313/posts/20231209/welcome/</link><pubDate>Sat, 09 Dec 2023 20:40:52 +0800</pubDate><guid>http://localhost:1313/posts/20231209/welcome/</guid><description>Welcome Welcome to my blog!You can see all my views here!</description></item></channel></rss>